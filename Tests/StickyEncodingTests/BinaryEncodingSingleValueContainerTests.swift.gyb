///
///  BinaryEncodingSingleValueContainerTests.swift
///
///  Copyright 2017 Tony Stone
///
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///
///  http://www.apache.org/licenses/LICENSE-2.0
///
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///
///  Created by Tony Stone on 10/6/17.
///
import XCTest

///
/// Note: This file contains public interface tests so do not use @testable.
///
import StickyEncoding

/// =================================== NOTICE ========================================
/// Do NOT edit this file directly as it will be regenerated automatically when needed.
///
/// Modify the  *.swift.gyb file instead.
/// ===================================================================================
%{
variants = [
    ("Bool",    "Bool", "false", "true"),
    ("Integer", "Int", "-32", "32"),
    ("Integer", "Int8", "-32", "32"),
    ("Integer", "Int16", "-32", "32"),
    ("Integer", "Int32", "-32", "32"),
    ("Integer", "Int64", "-32", "32"),
    ("Integer", "UInt", "32", "32"),
    ("Integer", "UInt8", "32", "32"),
    ("Integer", "UInt16", "32", "32"),
    ("Integer", "UInt32", "32", "32"),
    ("Integer", "UInt64", "32", "32"),
    ("Float", "Float", '-123456789.123456789', '123456789.123456789'),
    ("Float", "Double", '-123456789.123456789', '123456789.123456789'),
    ("Object",  "String", '"Test String 1"', '"Test String 2"'),
]
}%

class BinaryEncodingSingleValueContainerTests: XCTestCase {
%  for (Group, Type, Value1, Value2) in variants:

    // MARK: - `${Type}`

    ///
    /// Test the ability to encode/decode a root-level single `${Type}` value.
    ///
    func testEncodingDecodeOf${Type}() {

        _testCodableRoundTrip(input: ${Type}(${Value1})) { (result) in
            XCTAssertEqual(result, ${Type}(${Value1}))
        }
    }

    ///
    /// Test the ability to encode/decode a root-level single optional `${Type}` value.
    ///
    func testEncodingDecodeOfOptional${Type}() {

        _testCodableRoundTrip(input: Optional(${Type}(${Value1}))) { (result) in
            XCTAssertEqual(result, Optional(${Type}(${Value1})))
        }
    }

    ///
    /// Test the ability to encode/decode a root-level single optional `${Type}` value when nil.
    ///
    func testEncodingDecodeOfOptional${Type}Nil() {

        _testCodableRoundTrip(input: Optional<${Type}>.none) { (result) in
            XCTAssertEqual(result, Optional<${Type}>.none)
        }
    }

% if Group == 'Integer':

    ///
    /// Test the ability to encode/decode a root-level single `${Type}` value when zero (0).
    ///
    func testEncodingDecodeOf${Type}Zero() {

        _testCodableRoundTrip(input: ${Type}(0)) { (result) in
            XCTAssertEqual(result, ${Type}(0))
        }
    }

    ///
    /// Test the ability to encode/decode a root-level single `${Type}` value when ${Type}.min.
    ///
    func testEncodingDecodeOf${Type}Min() {

        _testCodableRoundTrip(input: ${Type}.min) { (result) in
            XCTAssertEqual(result, ${Type}.min)
        }
    }

    ///
    /// Test the ability to encode/decode a root-level single `${Type}` value when ${Type}.max.
    ///
    func testEncodingDecodeOf${Type}Max() {

        _testCodableRoundTrip(input: ${Type}.max) { (result) in
            XCTAssertEqual(result, ${Type}.max)
        }
    }

    ///
    /// Test the ability to encode/decode a root-level single optional `${Type}` value when zero (0).
    ///
    func testEncodingDecodeOfOptional${Type}Zero() {

        _testCodableRoundTrip(input: Optional(${Type}(0))) { (result) in
            XCTAssertEqual(result, Optional(${Type}(0)))
        }
    }

    ///
    /// Test the ability to encode/decode a root-level single optional `${Type}` value when ${Type}.min.
    ///
    func testEncodingDecodeOfOptional${Type}Min() {

        _testCodableRoundTrip(input: Optional(${Type}.min)) { (result) in
            XCTAssertEqual(result, Optional(${Type}.min))
        }
    }

    ///
    /// Test the ability to encode/decode a root-level single optional `${Type}` value when ${Type}.max.
    ///
    func testEncodingDecodeOfOptional${Type}Max() {

        _testCodableRoundTrip(input: Optional(${Type}.max)) { (result) in
            XCTAssertEqual(result, Optional(${Type}.max))
        }
    }
% end
% end
    // MARK: - `CodableType`

    ///
    /// Test the ability to encode/decode a root-level single `CodableType` value.
    ///
    func testEncodingDecodeOfCodableType() {

        struct InputType: Codable {
            var value: CodableType
            init(value: CodableType) { self.value = value }

            enum CodingKeys: CodingKey { case value }

            init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.value = try container.decode(CodableType.self)
            }
            func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                try container.encode(self.value)
            }
        }
        _testCodableRoundTrip(input: InputType(value: CodableType(32))) { (result) in
            XCTAssertEqual(result.value, CodableType(32))
        }
    }

    ///
    /// Test the ability to encode/decode a root-level single optional `CodableType` value.
    ///
    func testEncodingDecodeOfOptionalCodableType() {

        struct InputType: Codable {
            var value: CodableType?
            init(value: CodableType?) { self.value = value }

            enum CodingKeys: CodingKey { case value }

            init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.value = try container.decode(CodableType.self)
            }
            func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                try container.encode(self.value)
            }
        }
        _testCodableRoundTrip(input: InputType(value: CodableType(32))) { (result) in
            XCTAssertEqual(result.value, Optional(CodableType(32)))
        }
    }

    ///
    /// Test the ability to encode/decode a root-level single optional `CodableType` value when nil.
    ///
    func testEncodingDecodeOfOptionalCodableTypeNil() {

        struct InputType: Codable {
            var value: CodableType?
            init(value: CodableType?) { self.value = value }

            enum CodingKeys: CodingKey { case value }

            init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if !container.decodeNil() {
                    self.value = try container.decode(CodableType.self)
                } else {
                    self.value = nil
                }
            }
            func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                if let value = self.value {
                    try container.encode(value)
                } else {
                    try container.encodeNil()
                }
            }
        }
        _testCodableRoundTrip(input: InputType(value: nil)) { (result) in
            XCTAssertEqual(result.value, Optional<CodableType>.none)
        }
    }
}
